# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.



# Partner 1
Name: Kunaal Wadhwa
Student ID: 603826547
Email: contact@kunaal.in

# Partner 2 (if you're working in a team)
# Name: Avinash Chandrashekar
# Student ID: 303718035
# Email: howbigis1gb@gmail.com



# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We used forking to make peer uploads and downloads in parallel. Every 
upload/download task was a forked process and thus could happen in parallel.



# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)




# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)



# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

a) Buffer overflow:
   We send a GET request for a file-name greater than the allowed size of
   the buffer. This is a problem because it causes a segmentation fault
   causing the other peer to crash. While we use harmless characters, it 
   could potentially be used to over-write adjacent memory and do bad things.

b) "Unshared" file access attack:
   We request for a file such as "/etc/passwd". By using "/", we can go to
   the root directory and download files that are not in the current "shared"
   folder. This can allow us to get secret files that the peer chose to not
   share. Thus, as long as the peer does not disallow download of files 
   starting with "/", we can access any file on their disk.

c) DoS attack 1 (uploads):
   When someone sends us a download request (i.e. we upload), we can send 
   them a file with junk characters indefinitely. This is a problem as, if
   the other peer is implemented to handle downloads serially, it would block
   all future downloads (as this step would never complete). We could also 
   potentially use all the disk space of the client and fill it with junk.

d) DoS attack 2 (downloads):
   We continually keep sending a chosen peer a GET request for a specific 
   file. By doing this, we "crowd out" other requests. If the download process
   is implemented serially, this could be a problem - as we significantly 
   worsen the response time for other requests. If other requests are stored
   in a queue (we do not know how the client peer is implemented), the queue
   could eventually fill up leading to the dropping of requests.
   



# Extra credit problems

Extra credit problem: 4 Design Project Extra Credit - DoS attacks

(2 attacks implemented)

a) When a peer attempts to download a file, instead of the file, junk 
   characters are indefinitely sent. If a peer downloads serially, 
   they will not be able to continue servicing other upload and download
   requests, given that this upload will never complete

b) A peer is constantly bombarded with GET requests - so if the peer
   processes uploads and downloads serially, this will overload the 
   peer and increase the response time for other requests by a very
   significant amount.



# Add any other information you'd like us to know below this line.

Different evil-mode attacks implemented as evil_mode = 1, 2, 3, 4
Try different integers for different attacks.
